--
--	from src/grBMP.c
--
--	void putbytes(FILE *, int, unsigned long)		to	NBLEWriter
--	void gr_dot(int, int, long)				to	BMP; :dot
--	void gr_clear(long)					to	BMP; :rect, :clear
--	void gr_BMP(char *)					to	BMP; :write
--
--	from src/circle.c
--
--	void gr_circle(int, int, int, long)			to	BMP; :circle
--
--	from src/ellipse.c
--
--	void gr_ellipse(int, int, int, int, long)		to	BMP; :ellipse
--
--	from src/line.c
--
--	void gr_line(int, int, int, int, long)			to	BMP; :line
--

local H = require '_helper'

local readOnlyTable = H.readOnlyTable

local band, lshift, rshift = bit.band, bit.lshift, bit.rshift
local char = string.char
local abs, floor = math.abs, math.floor

local function NBLEWriter(n)
	return function (fh, x)
		for i=1,n do
			fh:write(char(band(x, 255)))
			x = rshift(x, 8)
		end
	end
end

local write1B = NBLEWriter(1)
local write2B = NBLEWriter(2)
local write4B = NBLEWriter(4)

local function BMP(X, Y)
	local T = {
		data = {}
	}

	for i=1,Y do
		T.data[i] = {}
	end

	function header(fh)
		write1B(fh, 66) -- "B"
		write1B(fh, 77) -- "M"
		write4B(fh, X * Y * 4 + 54)
		write4B(fh, 0)
		write4B(fh, 54)
		write4B(fh, 40)
		write4B(fh, X)
		write4B(fh, Y)
		write2B(fh, 1)
		write2B(fh, 32)
		write4B(fh, 0)
		write4B(fh, X * Y * 4)
		write4B(fh, 3780)
		write4B(fh, 3780)
		write4B(fh, 0)
		write4B(fh, 0)
	end

	function body(fh)
		for y=1,Y do
			for x=1,X do
				write4B(fh, T.data[y][x])
			end
		end
	end

	function inRange(x, y)
		return x >= 1 and x <= X and y >= 1 and y <= Y
	end

	function T:dot(x, y, color)
		if inRange(x, y) then
			T.data[y][x] = color
		end
	end

	function T:rect(lX, rX, lY, rY, color)
		for x=lX,rX do
			for y=lY,rY do
				T:dot(x, y, color)
			end
		end
	end

	function T:clear(color)
		T:rect(1, X, 1, Y, color)
	end

	function stepC(cX, cY, color, a, b, c, d)
		T:dot(cX + a, cY + b, color)
		T:dot(cX + a, cY - b, color)
		T:dot(cX - a, cY + b, color)
		T:dot(cX - a, cY - b, color)
		T:dot(cX + c, cY + d, color)
		T:dot(cX + c, cY - d, color)
		T:dot(cX - c, cY + d, color)
		T:dot(cX - c, cY - d, color)
	end

	function T:circle(cX, cY, r, color)
		local x, y = r, 0
		while x >= y do
			stepC(cX, cY, color, x, y, y, x)
			r, y = r - (lshift(y, 1) + 1), y + 1
			if r <= 0 then
				x = x - 1
				r = r + lshift(x, 1)
			end
		end
	end

	function initE(cX, cY, rX, rY, color)
		if rX > rY then
			return rX, function (x, y)
				stepC(cX, cY, color,
				      x, floor(y * rY / rX), y, floor(x * rY / rX))
			end
		else
			return rY, function (x, y)
				stepC(cX, cY, color,
				      floor(x * rX / rY), y, floor(y * rX / rY), x)
			end
		end
	end

	function T:ellipse(cX, cY, rX, rY, color)
		local x, step = initE(cX, cY, rX, rY, color)
		local r, y = x, 0
		while x >= y do
			step(x, y)
			r, y = r - (lshift(y, 1) + 1), y + 1
			if r <= 0 then
				x = x - 1
				r = r + lshift(x, 1)
			end
		end
	end

	function initL(x1, x2, y1, y2)
		local step
		if x1 > x2 then
			step = y1 > y2 and 1 or -1
			x1, x2, y1 = x2, x1, y2
		else
			step = y1 < y2 and 1 or -1
		end
		return step, x1, x2, y1, y2
	end

	function loopL(x1, x2, y1, y2, dX, dY, dotter)
		local step, a1, a2, b1, b2 = initL(x1, x2, y1, y2)

		dotter(a1, b1)

		local t = rshift(dX, 1)
		for a=a1+1,a2 do
			t = t - dY
			if t < 0 then
				t, b1 = t + dX, b1 + step
			end
			dotter(a, b1)
		end
	end

	function T:line(x1, y1, x2, y2, color)
		local dX, dY = abs(x2 - x1), abs(y2 - y1)
		if dX > dY then
			loopL(x1, x2, y1, y2, dX, dY,
			       function (a, b) T:dot(a, b, color) end)
		else
			loopL(y1, y2, x1, x2, dY, dX,
			       function (a, b) T:dot(b, a, color) end)
		end
	end

	function T:write(fh)
		header(fh)
		body(fh)
	end

	return T
end

local PRESET_COLORS = readOnlyTable({
	BLACK = 0x000000,
	WHITE = 0xffffff,
	RED   = 0xff0000,
	GREEN = 0x00ff00,
	BLUE  = 0x0000ff
})

return {
	BMP = BMP,
	PRESET_COLORS = PRESET_COLORS
}
