--
--	from src/grBMP.c
--
--	void putbytes(FILE *, int, unsigned long)		to	NBLEWriter
--	void gr_dot(int, int, long)				to	BMP; :dot
--	void gr_clear(long)					to	BMP; :rect, :clear
--	void gr_BMP(char *)					to	BMP; :write
--

local H = require '_helper'

local readOnlyTable = H.readOnlyTable

local band, rshift = bit.band, bit.rshift
local char = string.char

local function NBLEWriter(n)
	return function (fh, x)
		for i=1,n do
			fh:write(char(band(x, 255)))
			x = rshift(x, 8)
		end
	end
end

local write1B = NBLEWriter(1)
local write2B = NBLEWriter(2)
local write4B = NBLEWriter(4)

local function BMP(X, Y)
	local T = {
		data = {}
	}

	for i=1,Y do
		T.data[i] = {}
	end

	function header(fh)
		write1B(fh, 66) -- "B"
		write1B(fh, 77) -- "M"
		write4B(fh, X * Y * 4 + 54)
		write4B(fh, 0)
		write4B(fh, 54)
		write4B(fh, 40)
		write4B(fh, X)
		write4B(fh, Y)
		write2B(fh, 1)
		write2B(fh, 32)
		write4B(fh, 0)
		write4B(fh, X * Y * 4)
		write4B(fh, 3780)
		write4B(fh, 3780)
		write4B(fh, 0)
		write4B(fh, 0)
	end

	function body(fh)
		for y=1,Y do
			for x=1,X do
				write4B(fh, T.data[y][x])
			end
		end
	end

	function inRange(x, y)
		return x >= 1 and x <= X and y >= 1 and y <= Y
	end

	function T:dot(x, y, color)
		if inRange(x, y) then
			T.data[y][x] = color
		end
	end

	function T:rect(lX, rX, lY, rY, color)
		for x=lX,rX do
			for y=lY,rY do
				T:dot(x, y, color)
			end
		end
	end

	function T:clear(color)
		T:rect(1, X, 1, Y, color)
	end

	function T:write(fh)
		header(fh)
		body(fh)
	end

	return T
end

local PRESET_COLORS = readOnlyTable({
	BLACK = 0x000000,
	WHITE = 0xffffff,
	RED   = 0xff0000,
	GREEN = 0x00ff00,
	BLUE  = 0x0000ff
})

return {
	BMP = BMP,
	PRESET_COLORS = PRESET_COLORS
}
