--
--  from src/crnd.c
--
--    void init_rnd(unsigned long)  to  crnd; :init
--    unsigned long irnd(void)      to  crnd; :irnd
--    double rnd(void)              to  crnd; :rnd
--

local ffi_istype = require 'ffi'.istype
local isNum = require '_helper'.isNum

local function mustBeSeed(seed)
	assert(
		ffi_istype(0ULL, seed) or isNum(seed),
		"'seed' must be a cdata of ctype<uint64_t> (or a number)."
	)
	return isNum(seed) and seed * 1ULL or seed
end

--

local N = 18446744073709551616 -- ULONG_MAX of C (limits.h) + 1

local function crnd(x)
	local T = { seed = x ~= nil and mustBeSeed(x) or 1ULL }

	function T:init(x)
		T.seed = mustBeSeed(x)
	end

	function T:irnd()
		T.seed = T.seed * 1566083941ULL + 1
		return T.seed
	end

	function T:rnd()
		return (1 / N) * tonumber(T:irnd())
	end

	return T
end

return {
	crnd = crnd
}
