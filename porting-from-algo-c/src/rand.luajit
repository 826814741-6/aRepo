--
--  from src/rand.c
--
--    int rand(void)        to  rand
--    void srand(unsigned)  to  srand
--    rand, srand           to  RAND; :rand, :srand
--                                    :randRaw
--

local ffi_istype = require 'ffi'.istype
local isNum = require '_helper'.isNum

local function mustBeSeed(seed)
	assert(
		ffi_istype(0ULL, seed) or isNum(seed),
		"'seed' must be a cdata of ctype<uint64_t> (or a number)."
	)
	return isNum(seed) and seed * 1ULL or seed
end

--

local next = 1ULL

local function rand()
	next = next * 1103515245LL + 12345
	return (next / 65536LL) % 32768ULL
end

local function srand(seed)
	next = mustBeSeed(seed)
end

local function RAND(seed)
	local T = { next = seed ~= nil and mustBeSeed(seed) or 1ULL }

	function T:rand()
		T.next = T.next * 1103515245LL + 12345
		return (T.next / 65536LL) % 32768ULL
	end

	function T:srand(seed)
		T.next = mustBeSeed(seed)
	end

	function T:randRaw()
		T:rand()
		return T.next
	end

	return T
end

return {
	RAND_MAX = 32767,
	rand = rand,
	srand = srand,
	RAND = RAND
}
