local function abs(n) return n<0 and -n or n end

local function atLeastOne(n) return n>1 and n or 1 end

local sethook = debug.sethook

local function count(f, ...)
	local c = 0
	sethook(function() c = c + 1 end, "c")
	f(...)
	sethook()
	return c
end

local function isNum(v)
	return type(v) == "number"
end

local function isStr(v)
	return type(v) == "string"
end

local function mustBeNum(v)
	assert(type(v) == "number", "Must be a number.")
	return v
end

local function mustBeStr(v)
	assert(type(v) == "string", "Must be a string.")
	return v
end

-- local function readOnlyTable(t)
-- 	...
-- end
-- see: http://lua-users.org/wiki/ReadOnlyTables
--      https://www.lua.org/pil/13.4.5.html
--      (the last part of) https://www.lua.org/pil/13.3.html

local function with(path, mode, f)
	local fh = io.open(path, mode)
	local ret = pcall(f, fh)
	fh:close()
	assert(ret == true)
end

local function withPlt(path, plotter, n)
	assert(
		type(plotter.plotStart) == "function"
			and type(plotter.plotEnd) == "function",
		"Error: plotter must be an instance of svgPlot or svgPlot'With'Buffer"
	)
	return function (aFunc)
		with(path, "w", function (fh)
			plotter:plotStart(fh, n)
			aFunc(plotter)
			plotter:plotEnd()
		end)
	end
end

return {
	abs = abs,
	atLeastOne = atLeastOne,
	count = count,
	isNum = isNum,
	isStr = isStr,
	mustBeNum = mustBeNum,
	mustBeStr = mustBeStr,
	with = with,
	withPlt = withPlt
}
