local function abs(n) return n<0 and -n or n end

local function atLeastOne(n) return n>1 and n or 1 end

local d_sethook = debug.sethook

local function count(f, ...)
	local c = 0
	d_sethook(function() c = c + 1 end, "c")
	f(...)
	d_sethook()
	return c
end

local function isBool(v)
	return type(v) == "boolean"
end

local function isFh(v)
	return io.type(v) == "file"
end

local function isFun(v)
	return type(v) == "function"
end

local function isNum(v)
	return type(v) == "number"
end

local function isStr(v)
	return type(v) == "string"
end

local function isTbl(v)
	return type(v) == "table"
end

local function isUd(v)
	return type(v) == "userdata"
end

local function isBoolOrNil(v)
	return type(v) == "boolean" or v == nil
end

local function isFhOrNil(v)
	return io.type(v) == "file" or v == nil
end

local function isNumOrNil(v)
	return type(v) == "number" or v == nil
end

local function assertInitialValue(width, height)
	assert(type(width) == "number", "'width' must be a number.")
	assert(type(height) == "number", "'height' must be a number.")
end

local d_getinfo = debug.getinfo

local function getNumOfParams(f)
	return d_getinfo(f).nparams
end

local function getValueOrNil(predicate, v)
	if predicate(v) then
		return v
	else
		return nil
	end
end

local function getValueOrInit(predicate, v, initialValue)
	if predicate(v) then
		return v
	else
		return initialValue
	end
end

local function mustBeBool(v)
	assert(type(v) == "boolean", "Must be a boolean.")
	return v
end

local function mustBeNum(v)
	assert(type(v) == "number", "Must be a number.")
	return v
end

local function mustBeStr(v)
	assert(type(v) == "string", "Must be a string.")
	return v
end

-- local function readOnlyTable(t)
-- 	...
-- end
-- see: http://lua-users.org/wiki/ReadOnlyTables
--      https://www.lua.org/pil/13.4.5.html
--      (the last part of) https://www.lua.org/pil/13.3.html

local function with(path, mode, body)
	local fh = io.open(path, mode)
	local ret, err = pcall(body, fh)
	fh:close()
	assert(ret == true, err)
end

local function check(validators, target)
	for i,v in ipairs(validators) do
		assert(v(target[i]), i)
	end
end

local t_unpack = table.unpack ~= nil and table.unpack or unpack

local function wrapWithValidator(body, paramValidators, returnValidators, unpacker)
	unpacker = unpacker ~= nil and unpacker or t_unpack
	return setmetatable({ numOfParams = #paramValidators }, {
		__call = function (self, ...)
			local arg = {...}
			check(paramValidators, arg)

			local ret = {body(...)}
			check(returnValidators, ret)

			return unpacker(ret)
		end
	})
end

return {
	abs = abs,
	atLeastOne = atLeastOne,
	count = count,
	isBool = isBool,
	isFh = isFh,
	isFun = isFun,
	isNum = isNum,
	isStr = isStr,
	isTbl = isTbl,
	isUd = isUd,
	isBoolOrNil = isBoolOrNil,
	isFhOrNil = isFhOrNil,
	isNumOrNil = isNumOrNil,
	assertInitialValue = assertInitialValue,
	getNumOfParams = getNumOfParams,
	mustBeBool = mustBeBool,
	mustBeNum = mustBeNum,
	mustBeStr = mustBeStr,
	with = with,
	wrapWithValidator = wrapWithValidator
}
