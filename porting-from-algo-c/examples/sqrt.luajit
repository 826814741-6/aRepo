--
--	from src/sqrt.c
--
--	double mysqrt(double)		to	fSqrt
--
--	from src/isqrt.c
--
--	unsigned isqrt(unsigned)	to	iSqrt
--

local M = require 'nthroot'

local sqrt, fSqrt, iSqrt = math.sqrt, M.fSqrt, M.iSqrt

local function _t_iSqrt(l, r)
	for i=l,r-1 do
		local t = iSqrt(i)
		if t * t > i or (t+1) * (t+1) <= i then
			error(("ERROR: (i, t) is (%d, %d)"):format(i, t))
		end
	end
	print(("iSqrt() seems to be fine in %d to %d-1."):format(l, r))
end

do
	for i=0,20 do
		print(
			("math.sqrt(%d)\t%.20f\nfSqrt(%d)\t%.20f (%q)")
				:format(
					i,
					sqrt(i),
					i,
					fSqrt(i),
					sqrt(i) == fSqrt(i)
				)
		)
	end

	print("--")

	-- _t_iSqrt(0, 2 ^ 32) -- Maybe this will take a lot of time.
	_t_iSqrt(0, 2 ^ 16)
end
