--
--  from src/hilbert.c
--
--    void rul(int)  to  hilbert; rul
--    void dlu(int)  to  hilbert; dlu
--    void ldr(int)  to  hilbert; ldr
--    void urd(int)  to  hilbert; urd
--

local M = require 'svgplot'

local SvgPlotA = M.SvgPlot
local SvgPlotB = M.SvgPlotWholeBuffer
local SvgPlotC = M.SvgPlotWithBuffer
local hilbert = require 'hilbert'.hilbert
local file = require '_helper'.file

local function sampleWriter(pathPrefix, size, offset, style)
	local t = size + offset
	local pltA, pltB, pltC = SvgPlotA(t, t), SvgPlotB(t, t), SvgPlotC(t, t)

	return function (n)
		function body(plotter)
			plotter:pathStart()
			hilbert(plotter, n, size, offset)
			plotter:pathEnd(false, M.SV.PRESET_PLAIN)
		end

		file(("%s-A-%d.svg"):format(pathPrefix, n), "w", function (fh)
			pltA:write(fh, body)
		end)

		file(("%s-B-%d.svg"):format(pathPrefix, n), "w", function (fh)
			pltB:write(fh, body):reset()
		end)

		file(("%s-C-%d.svg"):format(pathPrefix, n), "w", function (fh)
			pltC:write(fh, body)
		end)
	end
end

do
	local writer = sampleWriter("results/hilbert-lj", 600, 3)

	for n=4,8,2 do
		writer(n)
	end
end
--
-- Note:
--
-- > = ("%d %g"):format(-0, -0)
-- 0 -0
-- >
--
