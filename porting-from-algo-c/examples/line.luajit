--
--  from src/line.c
--
--    void gr_line(int, int, int, int, long)  to   BMP; :line
--
--  from src/svgplot.c
--
--    ... some extensions for basic shapes    are  :circle, :ellipse, :line, :rect
--

local BMP = require 'grBMP'.BMP
local BLACK = require 'grBMP'.PRESET_COLORS.BLACK

local svgPlotA = require 'svgplot'.svgPlot
local svgPlotB = require 'svgplot'.svgPlotWholeBuffer
local svgPlotC = require 'svgplot'.svgPlotWithBuffer
local styleMaker = require 'svgplot'.styleMaker
local SV = require 'svgplot'.StyleValue

local RAND = require 'rand'.RAND
local file = require '_helper'.file

local b_band, b_rshift = bit.band, bit.rshift

function toRGB(n)
	return b_rshift(n, 16), b_band(b_rshift(n, 8), 0xff), b_band(n, 0xff)
end

function loop(instance, n, x, y, formatFunction)
	local r = RAND()
	for _=1,n do
		instance:line(
			tonumber(r:rand()) % x,
			tonumber(r:rand()) % y,
			tonumber(r:rand()) % x,
			tonumber(r:rand()) % y,
			formatFunction(r:randRaw() % (0xffffff + 1))
		)
	end
end

do
	local n, x, y = 100, 640, 400
	local bmp = BMP(x, y)

	bmp:clear(BLACK)
	loop(bmp, n, x, y, tonumber)

	file("results/line-lj.bmp", "wb", function (fh)
		bmp:write(fh)
	end)

	local styleR, styleL =
		styleMaker()
			:fill(SV.Black)
			:get(),
		styleMaker()
			:fill(SV.Transparent)
			:stroke(SV.RawRGB)
			:strokeWidth(1)
			:get()
	local fmtL = function (n) return styleL:format(toRGB(tonumber(n))) end

	function body(plotter)
		plotter:rect(0, 0, x, y, 0, 0, styleR)
		loop(plotter, n, x, y, fmtL)
	end

	file("results/line-lj-A.svg", "w", function (fh)
		svgPlotA(x, y):write(fh, body)
	end)
	file("results/line-lj-B.svg", "w", function (fh)
		svgPlotB(x, y):write(fh, body):reset()
	end)
	file("results/line-lj-C.svg", "w", function (fh)
		svgPlotC(x, y):write(fh, body)
	end)
end
